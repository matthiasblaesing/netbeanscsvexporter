/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.doppel_helix.netbeans.csvexporter.core.actions;

import eu.doppel_helix.netbeans.csvexporter.core.config.ExporterConfig;
import eu.doppel_helix.netbeans.csvexporter.core.config.node.ExporterConfigNode;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.tree.TreeSelectionModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

public final class TableImporterVisualPanel2 extends JPanel implements ExplorerManager.Provider {
    private ExplorerManager manager = new ExplorerManager();
    private ExporterConfig exporterConfig;
    private final Lookup explorerLookup;
    private final Lookup.Result explorerLookupListener;
    
    /**
     * Creates new form TableImporterVisualPanel2
     */
    public TableImporterVisualPanel2() {
        initComponents();
        beanTreeView1.setRootVisible(false);
        beanTreeView1.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        explorerLookup = ExplorerUtils.createLookup(manager, getActionMap());
        explorerLookupListener = explorerLookup.lookupResult(Node.class);
        explorerLookupListener.addLookupListener(new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                propertySheet1.setNodes(manager.getSelectedNodes());
            }
        });
        manager.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        beanTreeView1.expandAll();
                    }
                });
            }
        });
    }

    @Override
    public String getName() {
        return "Per column config";
    }

    public ExporterConfig getExporterConfig() {
        return exporterConfig;
    }

    public void setExporterConfig(ExporterConfig exporterConfig) {
        this.exporterConfig = exporterConfig;
        manager.setRootContext(new ExporterConfigNode(exporterConfig));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
        propertySheet1 = new org.openide.explorer.propertysheet.PropertySheet();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setLeftComponent(beanTreeView1);

        propertySheet1.setPreferredSize(new java.awt.Dimension(100, 50));
        jSplitPane1.setRightComponent(propertySheet1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    private javax.swing.JSplitPane jSplitPane1;
    private org.openide.explorer.propertysheet.PropertySheet propertySheet1;
    // End of variables declaration//GEN-END:variables
}
