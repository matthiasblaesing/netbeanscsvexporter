package eu.doppel_helix.netbeans.csvexporter.core.config.gui;

import eu.doppel_helix.netbeans.csvexporter.core.config.CSVConverterConfig;
import eu.doppel_helix.netbeans.csvexporter.core.config.CSVConverterConfigType;
import eu.doppel_helix.netbeans.csvexporter.core.config.LineEnding;
import eu.doppel_helix.netbeans.csvexporter.core.config.SeparatorPreset;
import eu.doppel_helix.netbeans.csvexporter.core.converter.CSVConverter;
import eu.doppel_helix.netbeans.csvexporter.core.util.JDBC;
import java.awt.Dimension;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import org.openide.nodes.BeanNode;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

public class BaseConfigEditor extends javax.swing.JPanel {

    private static final List<String> charsets;
    private CSVConverterConfig backingConfig = new CSVConverterConfig();
    private CSVConverterConfigType currentCCCT = null;

    static {
        charsets = new ArrayList<>(Charset.availableCharsets().keySet());
    }

    public void setConfig(CSVConverterConfig config) {
        backingConfig = config;
        updateGUIFromConfig();
    }

    public CSVConverterConfig getConfig() {
        if (nameTF.getText().trim().isEmpty()) {
            nameTF.setText("Unnamed");
        }
        updateConfigFromGUI();
        return backingConfig;
    }

    private void updateGUIFromConfig() {
        alwaysQuoteCB.setSelected(backingConfig.isAlwaysQuote());
        includeColumnTitleCB.setSelected(backingConfig.isIncludeColumnTitle());
        SeparatorPreset matchingPreset = null;
        for (SeparatorPreset sp : SeparatorPreset.values()) {
            if (sp.getSymbol() == backingConfig.getSeperator()) {
                matchingPreset = sp;
                break;
            }
        }
        if (matchingPreset != null) {
            separatorCB.setSelectedItem(matchingPreset);
            separatorTF.setText(Character.toString(matchingPreset.getSymbol()));
        } else {
            separatorCB.setSelectedItem(SeparatorPreset.OTHER);
            separatorTF.setText(Character.toString(backingConfig.getSeperator()));
        }
        quotecharCB.setSelectedItem(Character.toString(backingConfig.getQuoteChar()));
        escapecharCB.setSelectedItem(Character.toString(backingConfig.getEscapeChar()));
        lineEndCB.setSelectedItem(backingConfig.getLineEnd());
        charsetCB.setSelectedItem(backingConfig.getCharset());
        basePathTF.setText(backingConfig.getBasePath());
        nameTF.setText(backingConfig.getName());
        updateTypeInfoFromConfig(false);
    }

    private void updateConfigFromGUI() {
        backingConfig.setAlwaysQuote(alwaysQuoteCB.isSelected());
        backingConfig.setIncludeColumnTitle(includeColumnTitleCB.isSelected());
        backingConfig.setSeperator(separatorTF.getText().charAt(0));
        backingConfig.setQuoteChar(((String) quotecharCB.getSelectedItem()).charAt(0));
        backingConfig.setEscapeChar(((String) escapecharCB.getSelectedItem()).charAt(0));
        backingConfig.setLineEnd((LineEnding) lineEndCB.getSelectedItem());
        backingConfig.setCharset((String) charsetCB.getSelectedItem());
        backingConfig.setBasePath(basePathTF.getText());
        backingConfig.setName(nameTF.getText());
        if (currentCCCT != null && converterCB.getSelectedItem() != null) {
            CSVConverterConfigType ccct = backingConfig.getConverterConfig(currentCCCT.getSqlType());

            ccct.setConverter(converterCB.getSelectedItem().getClass().getName());
            ccct.setConfig(backingConfig);
            ccct.setParameters(((CSVConverter) converterCB.getSelectedItem()).getProperties());
        }
    }

    /**
     * Creates new form BaseConfigGUI
     */
    public BaseConfigEditor() {
        initComponents();

        Dimension d = separatorTF.getPreferredSize();
        separatorTF.setPreferredSize(d);
        separatorTF.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        includeColumnTitleCB = new javax.swing.JCheckBox();
        alwaysQuoteCB = new javax.swing.JCheckBox();
        lineEndCB = new javax.swing.JComboBox();
        charsetCB = new javax.swing.JComboBox();
        basePathTF = new javax.swing.JTextField();
        basePathBT = new javax.swing.JButton();
        separatorCB = new javax.swing.JComboBox<SeparatorPreset>();
        quotecharCB = new javax.swing.JComboBox();
        escapecharCB = new javax.swing.JComboBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        separatorTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        converterCB = new javax.swing.JComboBox<CSVConverter>();
        propertiesSheet = new org.openide.explorer.propertysheet.PropertySheet();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlTypeList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setLabelFor(includeColumnTitleCB);
        jLabel2.setText("Include Column Title:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Column Seperator:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Quote Character:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Escape Character:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel6.setLabelFor(alwaysQuoteCB);
        jLabel6.setText("Always Quote:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Line-Ending:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Charset:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Base Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(includeColumnTitleCB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(alwaysQuoteCB, gridBagConstraints);

        lineEndCB.setModel(new DefaultComboBoxModel<>(LineEnding.values()));
        lineEndCB.setRenderer(new LineEndingCBRenderer());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(lineEndCB, gridBagConstraints);

        charsetCB.setEditable(true);
        charsetCB.setModel(new DefaultComboBoxModel<String>(charsets.toArray(new String[]{})));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(charsetCB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(basePathTF, gridBagConstraints);

        basePathBT.setText("...");
        basePathBT.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        basePathBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basePathBTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(basePathBT, gridBagConstraints);

        separatorCB.setModel(new DefaultComboBoxModel<>(SeparatorPreset.values()));
        separatorCB.setRenderer(new SeparatorPresetCBRenderer());
        separatorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separatorCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(separatorCB, gridBagConstraints);

        quotecharCB.setEditable(true);
        quotecharCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "\"", "'" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(quotecharCB, gridBagConstraints);

        escapecharCB.setEditable(true);
        escapecharCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "\"", "'", "\\" }));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel1.add(escapecharCB, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 20;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(filler1, gridBagConstraints);

            separatorTF.setEditable(false);
            separatorTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            separatorTF.setText("dem");
            separatorTF.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    separatorTFFocusGained(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel1.add(separatorTF, gridBagConstraints);

            jLabel10.setText("Name:");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel1.add(jLabel10, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel1.add(nameTF, gridBagConstraints);
            jPanel1.add(jPanel4, new java.awt.GridBagConstraints());

            jTabbedPane1.addTab("Base", jPanel1);

            jPanel2.setLayout(new java.awt.BorderLayout());

            jSplitPane1.setDividerLocation(200);

            jPanel3.setLayout(new java.awt.GridBagLayout());

            converterCB.setModel(new DefaultComboBoxModel<CSVConverter>());
            converterCB.setBorder(javax.swing.BorderFactory.createTitledBorder("Converter"));
            converterCB.setRenderer(new CSVConverterListCellRenderer());
            converterCB.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    converterCBActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel3.add(converterCB, gridBagConstraints);

            propertiesSheet.setPopupEnabled(false);
            propertiesSheet.setPreferredSize(new java.awt.Dimension(100, 50));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(propertiesSheet, gridBagConstraints);

            jSplitPane1.setRightComponent(jPanel3);

            jPanel5.setLayout(new java.awt.GridBagLayout());

            DefaultListModel sqlTypesModel = new DefaultListModel<Entry<String,Integer>>();

            for(Entry e: JDBC.getSqlTypes().entrySet()) {
                sqlTypesModel.addElement(e);
            }
            sqlTypeList.setModel(sqlTypesModel);
            sqlTypeList.setCellRenderer(new SQLTypeRenderer());
            sqlTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    sqlTypeListValueChanged(evt);
                }
            });
            jScrollPane1.setViewportView(sqlTypeList);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel5.add(jScrollPane1, gridBagConstraints);

            jLabel1.setText("SQL-Type");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            jPanel5.add(jLabel1, gridBagConstraints);

            jSplitPane1.setLeftComponent(jPanel5);

            jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);

            jTabbedPane1.addTab("Per SQL Type", jPanel2);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            add(jTabbedPane1, gridBagConstraints);
        }// </editor-fold>//GEN-END:initComponents

    private void separatorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorCBActionPerformed
        if (separatorCB.getSelectedItem() == SeparatorPreset.OTHER) {
            separatorTF.setEditable(true);
            separatorTF.requestFocus();
        } else {
            separatorTF.setEditable(false);
            separatorTF.setText(Character.toString(((SeparatorPreset) separatorCB.getSelectedItem()).getSymbol()));
        }
    }//GEN-LAST:event_separatorCBActionPerformed

    private void separatorTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_separatorTFFocusGained
        if (separatorTF.isEditable()) {
            separatorTF.setSelectionStart(0);
            separatorTF.setSelectionEnd(separatorTF.getText().length());
        }
    }//GEN-LAST:event_separatorTFFocusGained

    private void sqlTypeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sqlTypeListValueChanged
        updateTypeInfoFromConfig(true);
    }//GEN-LAST:event_sqlTypeListValueChanged

    private void converterCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_converterCBActionPerformed
        updatePropertiesForSelectedConverter();
    }//GEN-LAST:event_converterCBActionPerformed

    private void basePathBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basePathBTActionPerformed
        JFileChooser jfc = new JFileChooser(basePathTF.getText());
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogTitle("Set basepath");
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            basePathTF.setText(jfc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_basePathBTActionPerformed

    private void updatePropertiesByConverter() {
        Entry<String, Integer> entry = (Entry<String, Integer>) sqlTypeList.getSelectedValue();

        CSVConverter selectedItem = null;

        if (currentCCCT == null) {
            converterCB.setEnabled(false);
        } else {
            converterCB.setEnabled(true);
            List<CSVConverter> typeConverters = new ArrayList<>();

            for (CSVConverter c : CSVConverter.enumerateConverters()) {
                if (c.getClass().getName().equals(currentCCCT.getConverter())) {
                    selectedItem = c;
                }
                if (c.isSupportedType(entry.getValue())) {
                    typeConverters.add(c);
                    c.setSqlType(entry.getValue());
                }

            }
            converterCB.setModel(new DefaultComboBoxModel(
                    typeConverters.toArray(new CSVConverter[typeConverters.size()])));
            converterCB.setSelectedItem(selectedItem);
        }

        updatePropertiesForSelectedConverter();
    }

    private void updatePropertiesForSelectedConverter() {
        try {
            CSVConverter selectedItem = (CSVConverter) converterCB.getSelectedItem();
            if (selectedItem != null) {
                selectedItem.setProperties(currentCCCT.getParameters());
                propertiesSheet.setNodes(new Node[]{new BeanNode(selectedItem)});
            } else {
                propertiesSheet.setNodes(new Node[]{});
            }
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void updateTypeInfoFromConfig(boolean saveOldConfig) {
        if(saveOldConfig) {
            updateConfigFromGUI();
        }
        Entry<String, Integer> entry = (Entry<String, Integer>) sqlTypeList.getSelectedValue();
        if (entry == null) {
            currentCCCT = null;
        } else {
            currentCCCT = backingConfig.getConverterConfig(entry.getValue());
        }
        updatePropertiesByConverter();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alwaysQuoteCB;
    private javax.swing.JButton basePathBT;
    private javax.swing.JTextField basePathTF;
    private javax.swing.JComboBox charsetCB;
    private javax.swing.JComboBox<CSVConverter> converterCB;
    private javax.swing.JComboBox escapecharCB;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JCheckBox includeColumnTitleCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox lineEndCB;
    private javax.swing.JTextField nameTF;
    private org.openide.explorer.propertysheet.PropertySheet propertiesSheet;
    private javax.swing.JComboBox quotecharCB;
    private javax.swing.JComboBox<SeparatorPreset> separatorCB;
    private javax.swing.JTextField separatorTF;
    private javax.swing.JList sqlTypeList;
    // End of variables declaration//GEN-END:variables
}
